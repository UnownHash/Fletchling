##
## fletchling.toml.example
##

## Here's your configuration for the nests DB. This will be where the 'nests'
## table is created/used.
## If you're already using the nests table in golbat db, configure
## your golbat db info here. This is a separate configuration from golbat_db
## below, because you may use any database you want for nests.
[nests_db]
addr = "dbhost"
db = "fletchling"
user = "username"
password = "password"

## Configure your golbat DB if you want to be able to refresh the
## number of spawnpoints that each nest has in order to use the
## 'min_spawnpoints' filtering. Otherwise, Fletchling will use what's
## in the DB already and if spawnpoints are not known, the nest
## will be allowed (not filtered). Spawnpoints will only be queried
## when we don't already have them (or in a future API call).
## This is *NOT* the configuration for your nests DB, even though it
## may be the same!
#[golbat_db]
#addr = "dbhost"
#db = "golbat"
#user = "username"
#password = "password"

## Poracle nest-change webhooks. You may configure more than one. Just
## duplicate the whole [[webhooks]] entry.
#[[webhooks]]
#url = "http://localhost:4202"
#headers = ["X-Poracle-Secret:abc", "Other-Header:def"]

#[[webhooks]]
#url = "http://localhost:4202"

[http]
## http server listen address (default: 127.0.0.1:9042)
## If you run docker, change this to ":9042" or "0.0.0.0:9042"
addr = "127.0.0.1:9042"

[logging]
debug = false
filename = "logs/fletchling.log"
max_backups = 50
compress = true

# A number of options that can be tweaked. I would leave the options alone
# that are commented out, at least to start. I find that the defaults work
# well.
# But, you may wish to limit your nests by area or spawnpoints. So, take a
# look at those. The spawnpoints filter only works if you've configured the
# 'golbat_db'.
[processor]
## how many spawnpoints required in the geofence in order to track (default 10)
## Requires the golbat_db section above to be configured. The number of
## spawnpoints for your nests will only be computed at startup and reload
## and only when they are not yet in the nests DB. There will be an API
## call made available to refresh these.
min_spawnpoints = 10

## minimum area in meters^2 required in order to track (default 100.0)
min_area_m2 = 100.0

## maximum area in meters^2 that cannot be exceeded in order to track (default 10000000.0)
max_area_m2 = 10000000.0

## allow nests that are contained by other nests. upon startup or reload, if any
## nests are found to be contained by other nests, they will be disabled.
# allow_contained = false

## Whether to log the last stats period when processing (default false)
## This just dumps info about the single time period that just finished
## to the logs.
# log_last_stats_period = false

## how often to rotate stats (default 15)
# rotation_interval_minutes = 15

## Require this many minutes of stats in order to produce the nesting pokemon and update the DB (default 1)
# min_history_duration_hours = 1

## Hold stats covering at most this many hours (default 12)
# max_history_duration_hours = 12

## number of a particular pokemon type seen needed to count as nesting (default 3)
# min_nest_pokemon = 4

## pct of particular pokemon type seen needed to count as nesting (default 12.0)
# min_nest_pokemon_pct = 12.0

## number of total pokemon seen in nest needed to count as nesting (default 12)
# min_total_pokemon = 12

## if > 0, ignore pokemon that are spawning globally more than this percent (default 15.0)
# max_global_spawn_pct = 15.0

## Mininium required pokemon NestPct/GlobalPct ratio (default 8.0)
# min_nest_pct_to_global_pct_ratio = 8

## Throw out a whole time period if a single mon spawns at more than this percent globally (default 40.0)
# skip_period_min_global_spawn_pct = 40.0

## How many hours without seeing a nesting pokemon before we unset it in DB (default 12)
# no_nesting_pokemon_age_hours = 12

# Prometheus settings.
[prometheus]
## Uncomment to enable prometheus stats and corresponding /metrics endpoint
#enabled = true
